version: '3'

services:
  db:
    container_name: db
    image: postgres
    environment:
      - GET_HOSTS_FROM=dns
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    networks:
      internal_network:
        aliases:
          - db.127.0.0.1.nip.io
    volumes:
      - db-data:/var/lib/postgresql/data

  studio:
    user: "${UID}:${GID}"
    container_name: studio
    build:
      context: .
    image: stackn:develop
    command: ["scripts/wait-for-it.sh", "db:5432", "--", sh, scripts/run_web.sh]
    environment:
      - GET_HOSTS_FROM=dns
      - KUBECONFIG=/app/cluster.conf
      - STUDIO_STORAGECLASS=microk8s-hostpath
      - STUDIO_ACCESSMODE=ReadWriteMany
      - DJANGO_SUPERUSER_PASSWORD=dGhpaXNhdmVyeW5vdHNhZmVvbmx
      - EVENT_USER_PASSWORD=dGhpaXNhdmVyeW5vdHNhZmVvbmx
      - DEBUG=true
      - INIT=true
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      # This is an environment variable that deletes all data in database on start up of the app.
      # Its primary use is for deployment on remote development environment.
      - RESET_DB=false

    ports:
      - "8080:8080"
    volumes:
      - .:/app:cached
     # - ${PWD}/cluster.conf:/app/cluster.conf
    depends_on:
      - db
    networks:
      internal_network:
        aliases:
          - studio.127.0.0.1.nip.io
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 6s
      timeout: 10s
      retries: 10

  redis:
    image: redis
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    networks:
     internal_network:
       aliases:
         - redis.127.0.0.1.nip.io

  rabbit:
    image: rabbitmq
    container_name: rabbitmq
    hostname: rabbit
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=LJqEG9RE4FdZbVWoJzZIOQEI
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      internal_network:
        aliases:
          - rabbit.127.0.0.1.nip.io

  celery-worker:
    user: "${UID}:${GID}"
    build: .
    container_name: celery-worker
    image: stackn:develop
    command: sh ./scripts/run_worker.sh
    environment:
      - KUBECONFIG=/app/cluster.conf
      - BASE_PATH=/app
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - STUDIO_STORAGECLASS=microk8s-hostpath
      - POSTGRES_DB=postgres
      - DEBUG=true
    volumes:
      - .:/app:cached
      - ${PWD}/cluster.conf:/app/cluster.conf
    links:
      - db
      - studio
      - rabbit
      - redis
    depends_on:
      - db
      - studio
      - rabbit
      - redis
    networks:
      internal_network:
        aliases:
          - celery.127.0.0.1.nip.io

  celery-beat:
    user: "${UID}:${GID}"
    build: .
    container_name: celery-beat
    image: stackn:develop
    command: sh ./scripts/run_beat.sh
    environment:
      - KUBECONFIG=/app/cluster.conf
      - BASE_PATH=/app
      - POSTGRES_USER=postgres
      - STUDIO_STORAGECLASS=microk8s-hostpath
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - DEBUG=true
    volumes:
      - .:/app:cached
      - ${PWD}/cluster.conf:/app/cluster.conf
    links:
      - db
      - studio
      - rabbit
      - redis
    depends_on:
      - db
      - studio
      - rabbit
      - redis
    networks:
      internal_network:
        aliases:
          - celery-beat.127.0.0.1.nip.io

  event-listener:
    user: "${UID}:${GID}"
    container_name: event-listener
    image: ghcr.io/scilifelabdatacentre/serve-event-listener/event-listener:v0.1.3
    environment:
      - KUBECONFIG=/cluster.conf
      - DEBUG=True
      - USERNAME=event_user@test.com
      - PASSWORD=dGhpaXNhdmVyeW5vdHNhZmVvbmx
      - BASE_URL=http://studio.127.0.0.1.nip.io:8080
    volumes:
      - ${PWD}/cluster.conf:/cluster.conf
    networks:
      internal_network:
        aliases:
          - studio.127.0.0.1.nip.io
    depends_on:
      studio:
        condition: service_healthy
    links:
      - studio
    restart: always


  unit-tests:
    user: "${UID}:${GID}"
    image: stackn:develop
    volumes:
    - .:/app:cached
    command: ["pytest"]
    profiles:
      - donotstart
    networks:
      internal_network:
        aliases:
          - studio.127.0.0.1.nip.io

  ui-tests:
    build:
      context: .
      dockerfile: Dockerfile.cypress
    volumes:
      - .:/app
      - "/var/run/docker.sock:/var/run/docker.sock"
    entrypoint: ["/bin/bash", "-c", "npm install . && cypress run"]
    profiles:
      - donotstart
    networks:
      internal_network:

networks:
  internal_network:
    driver: bridge

volumes:
  db-data:
