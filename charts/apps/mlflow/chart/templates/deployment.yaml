apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Values.namespace }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: mlflow
      project: {{ .Values.project.slug }}
      type: app
      pod: mlflow
  template:
    metadata:
      labels:
        release: {{ .Release.Name }}
        app: mlflow
        project: {{ .Values.project.slug }}
        networking/allow-internet-egress: "false"
        type: app
        pod: mlflow
    spec:
      automountServiceAccountToken: false
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      initContainers:
      # - image: alpine:latest
      #   name: init-auth
      #   command: ["/bin/sh"]
      #   args: ["-c", "apk add apache2-utils && htpasswd -Bbn {{ .Values.credentials.username }} {{ .Values.credentials.password }} > /auth/htpasswd"]
      #   volumeMounts:
      #   - name: auth-vol
      #     mountPath: /auth
      - name: wait-for-s3
        image: busybox
        env:
        - name: S3_SERVICE
          value: "{{ .Values.s3.service }}"
        - name: S3_PORT
          value: "{{ .Values.s3.port }}"
        command:  ["sh", "-c", "until nc -z $S3_SERVICE $S3_PORT > /dev/null; do echo Waiting for master.; sleep 2; done;"]
      - name: create-bucket
        image: minio/mc
        env:
        - name: S3_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3.service }}
              key: accesskey
        - name: S3_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3.service }}
              key: secretkey
        - name: AWS_REGION
          value: us-east-1
        - name: S3_ENDPOINT
          value: "http://{{ .Values.s3.service }}:{{ .Values.s3.port }}"
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash"]
        args: ["-c", "mc alias set projminio $S3_ENDPOINT $S3_ACCESS_KEY_ID $S3_SECRET_ACCESS_KEY;mc mb projminio/mlflow || echo 'Bucket mlflow already exists'"]
      containers:
      # - name: api-reverse-proxy
      #   image: nginxinc/nginx-unprivileged:latest
      #   imagePullPolicy: IfNotPresent
      #   {{- if .Values.securityContext.enabled }}
      #   securityContext:
      #     runAsUser: 101
      #     runAsGroup: 101
      #     allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
      #     privileged: {{ .Values.securityContext.privileged }}
      #     capabilities:
      #       drop:
      #         - all
      #   {{- end }}
      #   volumeMounts:
      #   - name: rp-conf
      #     mountPath: /etc/nginx
      #   - name: auth-vol
      #     mountPath: /auth
      - image: ghcr.io/scilifelabdatacentre/serve-mlflow:230216-0853
        imagePullPolicy: IfNotPresent
        name: mlflow
        command: ["/bin/bash"]
        args: ["-c", "mlflow server --backend-store-uri $BACKEND_STORE_URI --default-artifact-root s3://$MLFLOW_BUCKET/ --host 0.0.0.0 --port 5000"]
         {{- if .Values.securityContext.enabled }}
        securityContext:
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsGroup: {{ .Values.securityContext.runAsGroup }}
          allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
          privileged: {{ .Values.securityContext.privileged }}
          capabilities:
            drop:
              - all
        {{- end }}
        env:
        - name: BACKEND_STORE_URI
          value: sqlite:///mlruns/mydb.sqlite
        - name: MLFLOW_BUCKET
          value: mlflow
        - name: MLFLOW_S3_ENDPOINT_URL
          value: "http://{{ .Values.s3.service }}:{{ .Values.s3.port }}"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3.service }}
              key: accesskey
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3.service }}
              key: secretkey
        ports:
        - containerPort: 5000
        resources: {}
        volumeMounts:
        {{- range $key, $value := .Values.apps.volumeK8s }}
        - name: {{ $key }}
          mountPath: /mlruns
        {{- end }}
      hostname: {{ .Release.Name }}
      restartPolicy: Always
      volumes:
      - name: auth-vol
        emptyDir: {}
      - name: rp-conf
        configMap:
          name: {{ .Release.Name }}-rp-config
      {{- range $key, $value := .Values.apps.volumeK8s }}
      - name: {{ $key }}
        persistentVolumeClaim:
          claimName: {{ $value.release }}
      {{- end }}