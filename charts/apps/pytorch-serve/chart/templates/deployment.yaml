apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.release }}
  namespace: {{ .Values.namespace }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      release: {{ $.Release.Name }}
      app: {{ .Values.appname }}
      project: {{ $.Values.project.slug }}
      type: app
      pod: {{ .Values.appname }}
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "8501"
      labels:
        release: {{ $.Release.Name }}
        app: {{ .Values.appname }}
        project: {{ $.Values.project.slug }}
        networking/allow-internet-egress: "true"
        networking/allow-internet-ingress: "true"
        type: app
        pod: {{ .Values.appname }}
    spec:
      automountServiceAccountToken: false
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: copy-model
        image: minio/mc
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash"]
        {{ if .Values.s3.skip_tls }}
        args: ["-c", "mc config host add --insecure projminio $S3_ENDPOINT $S3_ACCESS_KEY_ID $S3_SECRET_ACCESS_KEY;mc cp --insecure --recursive projminio/$MODEL_STORE/$STACKN_MODEL_FILE /home/model-server/model-store/"]
        {{ else }}
        args: ["-c", "mc config host add projminio $S3_ENDPOINT $S3_ACCESS_KEY_ID $S3_SECRET_ACCESS_KEY;mc cp --recursive projminio/$MODEL_STORE/$STACKN_MODEL_FILE /home/model-server/model-store/"]
        {{ end }}
        volumeMounts:
        - name: model-vol
          mountPath: /home/model-server/model-store/
        env:
        - name: S3_ACCESS_KEY_ID
          value: {{ .Values.model.access_key }}
        - name: S3_SECRET_ACCESS_KEY
          value: {{ .Values.model.secret_key }}
        - name: S3_ENDPOINT
          value: {{ .Values.model.url }}
        - name: MODEL_STORE
          value: {{ .Values.model.path }}
        - name: STACKN_MODEL_FILE
          value: {{ .Values.model.obj }}
      - name: extract-model
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "cd /home/model-server/model-store && tar xvf $STACKN_MODEL_FILE && rm -v $STACKN_MODEL_FILE"]
        volumeMounts:
        - name: model-vol
          mountPath: /home/model-server/model-store/
        env:
        - name: MODEL_STORE
          value: {{ .Values.model.path }}
        - name: STACKN_MODEL_FILE
          value: {{ .Values.model.obj }}
      containers:
      {{ if .Values.model_card.enabled }}
      - name: model-card
        image: nginx:alpine
        imagePullPolicy: Always
        volumeMounts:
        - name: model-vol
          mountPath: /models
        - name: mc-conf
          mountPath: /etc/nginx
      {{ end }}
      - name: pytorch-serve
        image: {{ .Values.appconfig.image }}
        command: ["torchserve", "--start", "--model-store", "/home/model-server/model-store/{{ .Values.model.path }}", "--models", "all", "--ts-config", "config.properties", "--foreground"]
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        resources:
          {{- toYaml .Values.flavor | nindent 10 }}
        volumeMounts:
        - name: model-vol
          mountPath: /home/model-server/model-store/
        imagePullPolicy: Always
        ports:
        - name: ts
          containerPort: {{ .Values.appconfig.inference_port }}
        - name: ts-management
          containerPort: {{ .Values.appconfig.management_port }}
        - name: ts-metrics
          containerPort: {{ .Values.appconfig.metrics_port }}
      volumes:
      - name: torch-conf
        configMap:
          name: {{ .Release.Name }}-torch-conf
      - name: rp-conf
        configMap:
          name: {{ .Release.Name }}-rp-config
      {{ if .Values.model_card.enabled }}
      - name: mc-conf
        configMap:
          name: {{ .Release.Name }}-mc-config
      {{ end }}
      - name: model-vol
        emptyDir: {}
