apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appname }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      release: {{ $.Release.Name }}
      app: {{ .Values.appname }}
      project: {{ $.Values.project.slug }}
      type: app
      pod: {{ .Values.appname }}
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        # prometheus.io/port: "8501"
      labels:
        release: {{ $.Release.Name }}
        app: {{ .Values.appname }}
        project: {{ $.Values.project.slug }}
        networking/allow-internet-egress: "true"
        networking/allow-egress-to-studio-web: "true"
        type: app
        pod: {{ .Values.appname }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      automountServiceAccountToken: false
      securityContext:
        seccompProfile:
          type: RuntimeDefault
        {{- if .Values.appconfig.userid }}
        fsGroup: {{ .Values.appconfig.userid }}
        {{- else }}
        fsGroup: 1000
        {{- end }}
      {{- if .Values.apps.volumeK8s }}
      initContainers:
      - name: copy-to-pvc
        image: {{ .Values.appconfig.image }}
        imagePullPolicy: IfNotPresent
        command:
          - /bin/sh
          - -c
          - |
            if [ -n "$(ls -A {{ $.Values.appconfig.path }})" ]; then
              echo "Copying data..." && cp -r -n {{ $.Values.appconfig.path }}/* /tmp && echo "Done Copying";
            elif [ -d "{{ $.Values.appconfig.path }}" ]; then
              echo "Empty directory. Nothing to copy.";
            else
              echo "Directory does not exist" && cp -r -n {{ $.Values.appconfig.path }}/* /tmp;
            fi
        volumeMounts:
        {{- range $key, $value := .Values.apps.volumeK8s }}
        - name: {{ $key }}
          mountPath: /tmp
      {{- end }}
      {{- end }}
      containers:
      - name: {{ .Values.appname }}
        image: {{ .Values.appconfig.image }}
        imagePullPolicy: IfNotPresent
        command:
          - /bin/sh
          - -c
          - ./start-script.sh;
        ports:
          - containerPort: {{ .Values.appconfig.port }}
        securityContext:
          runAsNonRoot: true
          {{- if .Values.appconfig.userid }}
          runAsUser:  {{ .Values.appconfig.userid }}
          runAsGroup: {{ .Values.appconfig.userid }}
          {{- else }}
          runAsUser:  1000
          runAsGroup: 1000
          {{- end }}
          allowPrivilegeEscalation: false
          privileged: false
          capabilities:
            drop:
              - all
        resources:
          {{- toYaml .Values.flavor | nindent 10 }}
        {{- if .Values.apps.volumeK8s }}
        volumeMounts:
        {{- range $key, $value := .Values.apps.volumeK8s }}
        - name: {{ $key }}
          mountPath: {{ $.Values.appconfig.path }}
        {{- end }}
        {{- end }}
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      {{ if .Values.apps.volumeK8s }}
      volumes:
      {{- range $key, $value := .Values.apps.volumeK8s }}
      - name: {{ $key }}
        persistentVolumeClaim:
          claimName: {{ $value.release }}
      {{- end }}
      {{ end }}
