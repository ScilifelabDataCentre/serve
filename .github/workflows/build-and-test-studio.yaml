name: Build and test studio

on:
  push:
    branches:
      - main
      - staging
      - develop
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

  # Adds ability to run this workflow manually
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Manual run'
        required: false
        type: boolean

jobs:

  build_and_test:
    if: github.repository == 'scilifelabdatacentre/stackn'
    runs-on: ubuntu-20.04
    env:
      working-directory: .

    steps:
      - name: Branch or tag that triggered the workflow run
        run: |
          echo "Running on branch ${GITHUB_REF##*/}"
          echo "Running as UID: $UID, GID: $GID"
          whoami

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare repository
        run: |
          echo "Running as UID: $UID, GID: $GID"
          export GID=1000
          echo "Now running as UID: $UID, GID: $GID"
          whoami
          pwd
          mv .env.template .env
          mkdir -m 775 media
          sudo chgrp -R 1000 media
          sudo chmod -R g+rwx media
          ls -al

      - name: Start studio
        working-directory: ${{env.working-directory}}
        id: setup
        run: |
          set -ex
          echo "Deploying studio"
          docker compose up -d --build

      - name: Determine and set Studio URL
        working-directory: ${{env.working-directory}}
        run: |
          curl --version | head -n 1
          STUDIO_URL=`awk -F '= ' -v replace="'" '/STUDIO_URL/{gsub(replace, "", $NF); print $NF}' studio/settings.py`
          echo "STUDIO_URL=$STUDIO_URL" >> $GITHUB_ENV
          echo "The Studio URL is $STUDIO_URL"
          docker exec studio pwd
          docker exec studio ls -al
          docker exec studio whoami
          docker exec studio id stackn

      - name: Check URL is up
        uses: gerdemann/http-status-code@1.0.0
        with:
          url: ${{ env.STUDIO_URL }}
          code: 200 # http status code
          timeout: 120 # seconds
          interval: 5 # seconds
        continue-on-error: true

      - name: Check if Studio is ready
        working-directory: ${{env.working-directory}}
        id: check_studio_up
        run: |
          echo "Checking response from STUDIO_URL: ${{ env.STUDIO_URL }}"
          response=$(curl --write-out '%{http_code}' --silent --output /dev/null ${{ env.STUDIO_URL }})
          if [[ "$response" -ne 200 ]] ; then echo "status $response" && sleep 30; else echo "studio is ready"; fi

      - name: Run unit tests
        working-directory: ${{env.working-directory}}
        id: tests
        run: |
          docker compose run tests

      - name: Cypress run e2e tests
        uses: cypress-io/github-action@v5
        with:
          working-directory: ${{env.working-directory}}
          config: pageLoadTimeout=100000,baseUrl=${{ env.STUDIO_URL }}
          quiet: true
      - name: Save cypress screenshot artifacts on failure
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      - name: Save cypress video artifacts on failure
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos

  publish:
    if: | 
      github.repository == 'scilifelabdatacentre/stackn'
    needs: build_and_test
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./Dockerfile
            image: ghcr.io/${{ github.repository }}/serve-studio
          - dockerfile: ./Dockerfile.nginx
            image: ghcr.io/${{ github.repository }}/serve-ingress
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Docker meta
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ matrix.image }}
          tags: |
            type=raw,value={{date 'YYYYMMDD'}},prefix=${{ github.ref_name }}-
    
      - name: Log in to ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: docker build studio
        uses: docker/build-push-action@v2
        with:
          context: .
          push: "${{ github.event_name != 'pull_request' }}"
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ matrix.dockerfile }}
