name: Scaleout Integration test
on:
  # Adds ability to run this workflow manually
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug

jobs:
  test:
    runs-on: ubuntu-20.04
    env:
      working-directory: ./components/studio
    name: Integration test
    steps:
    - uses: actions/checkout@v2
    - uses: balchua/microk8s-actions@v0.2.1
      with:
        channel: '1.20/stable'
        addons: '["dns", "rbac", "storage", "ingress"]'
    - name: Check k8s
      id: myactions
      run: |
        echo "Checking k8s cluster"
        kubectl get no
        kubectl get pods -A -o wide
    - name: build jupyter-stackn image
      id: build_jupyter
      run: |
        docker build -t ghcr.io/scaleoutsystems/stackn/jupyter-stackn:test . -f components/studio/charts/apps/jupyter-lab/Dockerfile
        docker save ghcr.io/scaleoutsystems/stackn/jupyter-stackn:test > jupyter.tar
        sudo microk8s ctr image import jupyter.tar
        echo "Changing jupyter-stackn test image in project template"
        sed -i "s/\(\"image\": \"jupyter-stackn:.*\"\)/\"image\": \"jupyter-stackn:test\"/g" ./components/studio/projects/fixtures/projects_templates.json
    - name: start studio
      working-directory: ${{env.working-directory}}
      id: setup
      run: |
        set -ex
        echo "Running init script"
        ./init.sh --no-prompt
        echo "Deploying studio"
        docker-compose up -d
    - name: install CLI
      working-directory: ./cli
      id: cli
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir .
    - name: login studio
      working-directory: ${{env.working-directory}}
      id: login
      run: |
        ADMIN_PASSWORD=`awk -F '=' '/DJANGO_SUPERUSER_PASSWORD/{print $NF}' docker-compose.yml`
        STUDIO_URL=`awk -F '= ' -v replace="'" '/STUDIO_URL/{gsub(replace, "", $NF); print $NF}' studio/settings.py`
        response=$(curl --write-out '%{http_code}' --silent --output /dev/null $STUDIO_URL)
        if [[ "$response" -ne 200 ]] ; then sleep 30; else echo "studio is ready"; fi
        stackn login -u admin -p $ADMIN_PASSWORD --url $STUDIO_URL
    - name: create project default
      id: project
      run: |
        echo "Creating stackn project"
        stackn create project -t default test
        stackn get projects
        sleep 20
        echo "Docker logs celery-worker"
        docker logs celery-worker --tail 100
        POD_NAME=`kubectl get po -l app=mlflow --no-headers -o custom-columns=":metadata.name"`
        kubectl get po
        echo "MLFlow pod: $POD_NAME"
        echo "Waiting for lab pod to be ready"
        kubectl wait --for=condition=Ready pod/$POD_NAME --timeout=240s

