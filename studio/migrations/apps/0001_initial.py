# Generated by Django 5.0.2 on 2024-05-15 09:21

import django.core.validators
import django.db.models.deletion
import tagulous.models.models
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BaseAppInstance",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("chart", models.CharField(max_length=512)),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("deleted_on", models.DateTimeField(blank=True, null=True)),
                ("info", models.JSONField(blank=True, null=True)),
                ("name", models.CharField(default="app_name", max_length=512)),
                ("k8s_values", models.JSONField(blank=True, null=True)),
                ("url", models.URLField(blank=True, null=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
            ],
            options={
                "permissions": [("can_access_app", "Can access app service")],
            },
        ),
        migrations.CreateModel(
            name="AppCategories",
            fields=[
                ("name", models.CharField(max_length=512)),
                ("priority", models.IntegerField(default=100)),
                ("slug", models.CharField(default="", max_length=512, primary_key=True, serialize=False)),
            ],
            options={
                "verbose_name": "App Category",
                "verbose_name_plural": "App Categories",
            },
        ),
        migrations.CreateModel(
            name="AppInstance",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("access", models.CharField(blank=True, default="private", max_length=20, null=True)),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("deleted_on", models.DateTimeField(blank=True, null=True)),
                ("description", models.TextField(blank=True, default="", null=True)),
                ("info", models.JSONField(blank=True, null=True)),
                ("name", models.CharField(default="app_name", max_length=512)),
                ("parameters", models.JSONField(blank=True, null=True)),
                ("state", models.CharField(blank=True, max_length=50, null=True)),
                ("table_field", models.JSONField(blank=True, null=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                ("note_on_linkonly_privacy", models.TextField(blank=True, default="", null=True)),
                ("source_code_url", models.URLField(blank=True, null=True)),
            ],
            options={
                "permissions": [("can_access_app", "Can access app service")],
            },
        ),
        migrations.CreateModel(
            name="Apps",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("user_can_create", models.BooleanField(default=True)),
                ("user_can_edit", models.BooleanField(default=True)),
                ("user_can_delete", models.BooleanField(default=True)),
                ("access", models.CharField(blank=True, default="public", max_length=20, null=True)),
                ("chart", models.CharField(max_length=512)),
                ("chart_archive", models.FileField(blank=True, null=True, upload_to="apps/")),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("description", models.TextField(blank=True, default="", null=True)),
                ("logo", models.CharField(blank=True, max_length=512, null=True)),
                ("name", models.CharField(max_length=512)),
                ("priority", models.IntegerField(default=100)),
                ("revision", models.IntegerField(default=1)),
                ("settings", models.JSONField(blank=True, null=True)),
                ("slug", models.CharField(blank=True, max_length=512, null=True)),
                ("table_field", models.JSONField(blank=True, null=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "App Template",
                "verbose_name_plural": "App Templates",
            },
        ),
        migrations.CreateModel(
            name="AppStatus",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("info", models.JSONField(blank=True, null=True)),
                ("status", models.CharField(default="Creating", max_length=15)),
                ("time", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "App Status",
                "verbose_name_plural": "App Statuses",
                "get_latest_by": "time",
            },
        ),
        migrations.CreateModel(
            name="Subdomain",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("subdomain", models.CharField(max_length=30, unique=True)),
            ],
            options={
                "verbose_name": "Subdomain",
                "verbose_name_plural": "Subdomains",
            },
        ),
        migrations.CreateModel(
            name="Tagulous_AppInstance_tags",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, unique=True)),
                ("slug", models.SlugField()),
                (
                    "count",
                    models.IntegerField(default=0, help_text="Internal counter of how many times this tag is in use"),
                ),
                (
                    "protected",
                    models.BooleanField(default=False, help_text="Will not be deleted when the count reaches 0"),
                ),
            ],
            options={
                "ordering": ("name",),
                "abstract": False,
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name="Tagulous_CustomAppInstance_tags",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, unique=True)),
                ("slug", models.SlugField()),
                (
                    "count",
                    models.IntegerField(default=0, help_text="Internal counter of how many times this tag is in use"),
                ),
                (
                    "protected",
                    models.BooleanField(default=False, help_text="Will not be deleted when the count reaches 0"),
                ),
            ],
            options={
                "ordering": ("name",),
                "abstract": False,
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name="Tagulous_DashInstance_tags",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, unique=True)),
                ("slug", models.SlugField()),
                (
                    "count",
                    models.IntegerField(default=0, help_text="Internal counter of how many times this tag is in use"),
                ),
                (
                    "protected",
                    models.BooleanField(default=False, help_text="Will not be deleted when the count reaches 0"),
                ),
            ],
            options={
                "ordering": ("name",),
                "abstract": False,
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name="Tagulous_ShinyInstance_tags",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, unique=True)),
                ("slug", models.SlugField()),
                (
                    "count",
                    models.IntegerField(default=0, help_text="Internal counter of how many times this tag is in use"),
                ),
                (
                    "protected",
                    models.BooleanField(default=False, help_text="Will not be deleted when the count reaches 0"),
                ),
            ],
            options={
                "ordering": ("name",),
                "abstract": False,
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name="Tagulous_Social_tags",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, unique=True)),
                ("slug", models.SlugField()),
                (
                    "count",
                    models.IntegerField(default=0, help_text="Internal counter of how many times this tag is in use"),
                ),
                (
                    "protected",
                    models.BooleanField(default=False, help_text="Will not be deleted when the count reaches 0"),
                ),
            ],
            options={
                "ordering": ("name",),
                "abstract": False,
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name="Tagulous_TissuumapsInstance_tags",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, unique=True)),
                ("slug", models.SlugField()),
                (
                    "count",
                    models.IntegerField(default=0, help_text="Internal counter of how many times this tag is in use"),
                ),
                (
                    "protected",
                    models.BooleanField(default=False, help_text="Will not be deleted when the count reaches 0"),
                ),
            ],
            options={
                "ordering": ("name",),
                "abstract": False,
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name="CustomAppInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                ("note_on_linkonly_privacy", models.TextField(blank=True, default="", null=True)),
                ("source_code_url", models.URLField(blank=True, null=True)),
                ("description", models.TextField(blank=True, default="", null=True)),
                (
                    "access",
                    models.CharField(
                        choices=[
                            ("project", "Project"),
                            ("private", "Private"),
                            ("public", "Public"),
                            ("link", "Link"),
                        ],
                        default="private",
                        max_length=20,
                    ),
                ),
                ("port", models.IntegerField(default=8000)),
                ("image", models.CharField(max_length=255)),
                ("path", models.CharField(default="/", max_length=255)),
                ("user_id", models.IntegerField(default=1000)),
            ],
            options={
                "verbose_name": "Custom App Instance",
                "verbose_name_plural": "Custom App Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance", models.Model),
        ),
        migrations.CreateModel(
            name="DashInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                ("note_on_linkonly_privacy", models.TextField(blank=True, default="", null=True)),
                ("source_code_url", models.URLField(blank=True, null=True)),
                ("description", models.TextField(blank=True, default="", null=True)),
                (
                    "access",
                    models.CharField(
                        choices=[
                            ("project", "Project"),
                            ("private", "Private"),
                            ("public", "Public"),
                            ("link", "Link"),
                        ],
                        default="private",
                        max_length=20,
                    ),
                ),
                ("port", models.IntegerField(default=8000)),
                ("image", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "Dash App Instance",
                "verbose_name_plural": "Dash App Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance", models.Model),
        ),
        migrations.CreateModel(
            name="FilemanagerInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                (
                    "access",
                    models.CharField(
                        choices=[("project", "Project"), ("private", "Private")], default="project", max_length=20
                    ),
                ),
                ("persistent", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Filemanager",
                "verbose_name_plural": "Filemanagers",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance",),
        ),
        migrations.CreateModel(
            name="JupyterInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                (
                    "access",
                    models.CharField(
                        choices=[("project", "Project"), ("private", "Private")], default="private", max_length=20
                    ),
                ),
            ],
            options={
                "verbose_name": "JupyterLab Instance",
                "verbose_name_plural": "JupyterLab Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance",),
        ),
        migrations.CreateModel(
            name="NetpolicyInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
            ],
            options={
                "verbose_name": "Network Policy",
                "verbose_name_plural": "Network Policies",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance",),
        ),
        migrations.CreateModel(
            name="RStudioInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                (
                    "access",
                    models.CharField(
                        choices=[("project", "Project"), ("private", "Private")], default="private", max_length=20
                    ),
                ),
            ],
            options={
                "verbose_name": "RStudio Instance",
                "verbose_name_plural": "RStudio Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance",),
        ),
        migrations.CreateModel(
            name="ShinyInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                ("note_on_linkonly_privacy", models.TextField(blank=True, default="", null=True)),
                ("source_code_url", models.URLField(blank=True, null=True)),
                ("description", models.TextField(blank=True, default="", null=True)),
                (
                    "access",
                    models.CharField(
                        choices=[
                            ("project", "Project"),
                            ("private", "Private"),
                            ("public", "Public"),
                            ("link", "Link"),
                        ],
                        default="private",
                        max_length=20,
                    ),
                ),
                ("port", models.IntegerField(default=3838)),
                ("image", models.CharField(max_length=255)),
                ("proxy", models.BooleanField(default=True)),
                ("container_waittime", models.IntegerField(default=20000)),
                ("heartbeat_timeout", models.IntegerField(default=60000)),
                ("heartbeat_rate", models.IntegerField(default=10000)),
            ],
            options={
                "verbose_name": "Shiny App Instance",
                "verbose_name_plural": "Shiny App Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance", models.Model),
        ),
        migrations.CreateModel(
            name="TissuumapsInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                ("note_on_linkonly_privacy", models.TextField(blank=True, default="", null=True)),
                ("source_code_url", models.URLField(blank=True, null=True)),
                ("description", models.TextField(blank=True, default="", null=True)),
                (
                    "access",
                    models.CharField(
                        choices=[
                            ("project", "Project"),
                            ("private", "Private"),
                            ("public", "Public"),
                            ("link", "Link"),
                        ],
                        default="private",
                        max_length=20,
                    ),
                ),
            ],
            options={
                "verbose_name": "TissUUmaps Instance",
                "verbose_name_plural": "TissUUmaps Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance", models.Model),
        ),
        migrations.CreateModel(
            name="VolumeInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                (
                    "size",
                    models.IntegerField(
                        default=1,
                        help_text="Size in GB",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
            ],
            options={
                "verbose_name": "Persistent Volume",
                "verbose_name_plural": "Persistent Volumes",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance",),
        ),
        migrations.CreateModel(
            name="VSCodeInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                (
                    "access",
                    models.CharField(
                        choices=[("project", "Project"), ("private", "Private")], default="private", max_length=20
                    ),
                ),
            ],
            options={
                "verbose_name": "VS Code Instance",
                "verbose_name_plural": "VS Code Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance",),
        ),
    ]
