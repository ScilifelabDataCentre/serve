# Generated by Django 5.0.2 on 2024-05-15 09:21

import django.db.models.deletion
import tagulous.models.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("apps", "0001_initial"),
        ("collections_module", "0002_collection_zenodo_community_id"),
        ("models", "0001_initial"),
        ("projects", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="baseappinstance",
            name="flavor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="%(class)s",
                to="projects.flavor",
            ),
        ),
        migrations.AddField(
            model_name="baseappinstance",
            name="owner",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="baseappinstance",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="%(class)s", to="projects.project"
            ),
        ),
        migrations.AddField(
            model_name="appinstance",
            name="app_dependencies",
            field=models.ManyToManyField(blank=True, to="apps.appinstance"),
        ),
        migrations.AddField(
            model_name="appinstance",
            name="collections",
            field=models.ManyToManyField(blank=True, related_name="app_instances", to="collections_module.collection"),
        ),
        migrations.AddField(
            model_name="appinstance",
            name="flavor",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="appinstance",
                to="projects.flavor",
            ),
        ),
        migrations.AddField(
            model_name="appinstance",
            name="model_dependencies",
            field=models.ManyToManyField(blank=True, to="models.model"),
        ),
        migrations.AddField(
            model_name="appinstance",
            name="owner",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="app_owner",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="appinstance",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="appinstance", to="projects.project"
            ),
        ),
        migrations.AddField(
            model_name="apps",
            name="category",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, related_name="apps", to="apps.appcategories"
            ),
        ),
        migrations.AddField(
            model_name="apps",
            name="projects",
            field=models.ManyToManyField(blank=True, to="projects.project"),
        ),
        migrations.AddField(
            model_name="appinstance",
            name="app",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="appinstance", to="apps.apps"
            ),
        ),
        migrations.AddField(
            model_name="baseappinstance",
            name="app",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_related",
                to="apps.apps",
            ),
        ),
        migrations.AddField(
            model_name="baseappinstance",
            name="app_status",
            field=models.OneToOneField(
                null=True, on_delete=django.db.models.deletion.RESTRICT, related_name="%(class)s", to="apps.appstatus"
            ),
        ),
        migrations.AddField(
            model_name="subdomain",
            name="project",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="projects.project"),
        ),
        migrations.AddField(
            model_name="baseappinstance",
            name="subdomain",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, related_name="%(class)s", to="apps.subdomain"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tagulous_appinstance_tags",
            unique_together={("slug",)},
        ),
        migrations.AddField(
            model_name="appinstance",
            name="tags",
            field=tagulous.models.fields.TagField(
                _set_tag_meta=True,
                blank=True,
                help_text="Enter a comma-separated tag string",
                to="apps.tagulous_appinstance_tags",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tagulous_customappinstance_tags",
            unique_together={("slug",)},
        ),
        migrations.AlterUniqueTogether(
            name="tagulous_dashinstance_tags",
            unique_together={("slug",)},
        ),
        migrations.AlterUniqueTogether(
            name="tagulous_shinyinstance_tags",
            unique_together={("slug",)},
        ),
        migrations.AlterUniqueTogether(
            name="tagulous_social_tags",
            unique_together={("slug",)},
        ),
        migrations.AlterUniqueTogether(
            name="tagulous_tissuumapsinstance_tags",
            unique_together={("slug",)},
        ),
        migrations.AddField(
            model_name="customappinstance",
            name="tags",
            field=tagulous.models.fields.TagField(
                _set_tag_meta=True,
                blank=True,
                help_text="Enter a comma-separated tag string",
                to="apps.tagulous_customappinstance_tags",
            ),
        ),
        migrations.AddField(
            model_name="dashinstance",
            name="tags",
            field=tagulous.models.fields.TagField(
                _set_tag_meta=True,
                blank=True,
                help_text="Enter a comma-separated tag string",
                to="apps.tagulous_dashinstance_tags",
            ),
        ),
        migrations.AddField(
            model_name="shinyinstance",
            name="tags",
            field=tagulous.models.fields.TagField(
                _set_tag_meta=True,
                blank=True,
                help_text="Enter a comma-separated tag string",
                to="apps.tagulous_shinyinstance_tags",
            ),
        ),
        migrations.AddField(
            model_name="tissuumapsinstance",
            name="tags",
            field=tagulous.models.fields.TagField(
                _set_tag_meta=True,
                blank=True,
                help_text="Enter a comma-separated tag string",
                to="apps.tagulous_tissuumapsinstance_tags",
            ),
        ),
        migrations.AddField(
            model_name="tissuumapsinstance",
            name="volume",
            field=models.ManyToManyField(blank=True, to="apps.volumeinstance"),
        ),
        migrations.AddField(
            model_name="rstudioinstance",
            name="volume",
            field=models.ManyToManyField(blank=True, to="apps.volumeinstance"),
        ),
        migrations.AddField(
            model_name="jupyterinstance",
            name="volume",
            field=models.ManyToManyField(blank=True, to="apps.volumeinstance"),
        ),
        migrations.AddField(
            model_name="filemanagerinstance",
            name="volume",
            field=models.ManyToManyField(blank=True, to="apps.volumeinstance"),
        ),
        migrations.AddField(
            model_name="customappinstance",
            name="volume",
            field=models.ManyToManyField(blank=True, to="apps.volumeinstance"),
        ),
        migrations.AddField(
            model_name="vscodeinstance",
            name="volume",
            field=models.ManyToManyField(blank=True, to="apps.volumeinstance"),
        ),
        migrations.AlterUniqueTogether(
            name="apps",
            unique_together={("slug", "revision")},
        ),
    ]
