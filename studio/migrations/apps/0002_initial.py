# Generated by Django 5.0.2 on 2024-05-15 12:16

import django.core.validators
import django.db.models.deletion
import tagulous.models.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("apps", "0001_initial"),
        ("models", "0001_initial"),
        ("portal", "0001_initial"),
        ("projects", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="appinstance",
            name="collections",
            field=models.ManyToManyField(blank=True, related_name="app_instances", to="portal.collection"),
        ),
        migrations.AddField(
            model_name="appinstance",
            name="flavor",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="appinstance",
                to="projects.flavor",
            ),
        ),
        migrations.AddField(
            model_name="appinstance",
            name="model_dependencies",
            field=models.ManyToManyField(blank=True, to="models.model"),
        ),
        migrations.AddField(
            model_name="appinstance",
            name="owner",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="app_owner",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="appinstance",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="appinstance", to="projects.project"
            ),
        ),
        migrations.AddField(
            model_name="apps",
            name="category",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, related_name="apps", to="apps.appcategories"
            ),
        ),
        migrations.AddField(
            model_name="apps",
            name="projects",
            field=models.ManyToManyField(blank=True, to="projects.project"),
        ),
        migrations.AddField(
            model_name="appinstance",
            name="app",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="appinstance", to="apps.apps"
            ),
        ),
        migrations.CreateModel(
            name="NetpolicyInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
            ],
            options={
                "verbose_name": "Network Policy",
                "verbose_name_plural": "Network Policies",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance",),
        ),
        migrations.CreateModel(
            name="VolumeInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                (
                    "size",
                    models.IntegerField(
                        default=1,
                        help_text="Size in GB",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
            ],
            options={
                "verbose_name": "Persistent Volume",
                "verbose_name_plural": "Persistent Volumes",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance",),
        ),
        migrations.AddField(
            model_name="baseappinstance",
            name="app",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_related",
                to="apps.apps",
            ),
        ),
        migrations.AddField(
            model_name="baseappinstance",
            name="app_status",
            field=models.OneToOneField(
                null=True, on_delete=django.db.models.deletion.RESTRICT, related_name="%(class)s", to="apps.appstatus"
            ),
        ),
        migrations.AddField(
            model_name="baseappinstance",
            name="flavor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="%(class)s",
                to="projects.flavor",
            ),
        ),
        migrations.AddField(
            model_name="baseappinstance",
            name="owner",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="baseappinstance",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="%(class)s", to="projects.project"
            ),
        ),
        migrations.AddField(
            model_name="subdomain",
            name="project",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="projects.project"),
        ),
        migrations.AddField(
            model_name="baseappinstance",
            name="subdomain",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, related_name="%(class)s", to="apps.subdomain"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tagulous_appinstance_tags",
            unique_together={("slug",)},
        ),
        migrations.AddField(
            model_name="appinstance",
            name="tags",
            field=tagulous.models.fields.TagField(
                _set_tag_meta=True,
                blank=True,
                help_text="Enter a comma-separated tag string",
                to="apps.tagulous_appinstance_tags",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tagulous_customappinstance_tags",
            unique_together={("slug",)},
        ),
        migrations.AlterUniqueTogether(
            name="tagulous_dashinstance_tags",
            unique_together={("slug",)},
        ),
        migrations.AlterUniqueTogether(
            name="tagulous_shinyinstance_tags",
            unique_together={("slug",)},
        ),
        migrations.AlterUniqueTogether(
            name="tagulous_social_tags",
            unique_together={("slug",)},
        ),
        migrations.AlterUniqueTogether(
            name="tagulous_tissuumapsinstance_tags",
            unique_together={("slug",)},
        ),
        migrations.AlterUniqueTogether(
            name="apps",
            unique_together={("slug", "revision")},
        ),
        migrations.CreateModel(
            name="DashInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                ("note_on_linkonly_privacy", models.TextField(blank=True, default="", null=True)),
                ("source_code_url", models.URLField(blank=True, null=True)),
                ("description", models.TextField(blank=True, default="", null=True)),
                (
                    "access",
                    models.CharField(
                        choices=[
                            ("project", "Project"),
                            ("private", "Private"),
                            ("public", "Public"),
                            ("link", "Link"),
                        ],
                        default="private",
                        max_length=20,
                    ),
                ),
                ("port", models.IntegerField(default=8000)),
                ("image", models.CharField(max_length=255)),
                ("collections", models.ManyToManyField(blank=True, related_name="%(class)s", to="portal.collection")),
                (
                    "tags",
                    tagulous.models.fields.TagField(
                        _set_tag_meta=True,
                        blank=True,
                        help_text="Enter a comma-separated tag string",
                        to="apps.tagulous_dashinstance_tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dash App Instance",
                "verbose_name_plural": "Dash App Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance", models.Model),
        ),
        migrations.CreateModel(
            name="ShinyInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                ("note_on_linkonly_privacy", models.TextField(blank=True, default="", null=True)),
                ("source_code_url", models.URLField(blank=True, null=True)),
                ("description", models.TextField(blank=True, default="", null=True)),
                (
                    "access",
                    models.CharField(
                        choices=[
                            ("project", "Project"),
                            ("private", "Private"),
                            ("public", "Public"),
                            ("link", "Link"),
                        ],
                        default="private",
                        max_length=20,
                    ),
                ),
                ("port", models.IntegerField(default=3838)),
                ("image", models.CharField(max_length=255)),
                ("proxy", models.BooleanField(default=True)),
                ("container_waittime", models.IntegerField(default=20000)),
                ("heartbeat_timeout", models.IntegerField(default=60000)),
                ("heartbeat_rate", models.IntegerField(default=10000)),
                ("collections", models.ManyToManyField(blank=True, related_name="%(class)s", to="portal.collection")),
                (
                    "tags",
                    tagulous.models.fields.TagField(
                        _set_tag_meta=True,
                        blank=True,
                        help_text="Enter a comma-separated tag string",
                        to="apps.tagulous_shinyinstance_tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "Shiny App Instance",
                "verbose_name_plural": "Shiny App Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance", models.Model),
        ),
        migrations.CreateModel(
            name="TissuumapsInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                ("note_on_linkonly_privacy", models.TextField(blank=True, default="", null=True)),
                ("source_code_url", models.URLField(blank=True, null=True)),
                ("description", models.TextField(blank=True, default="", null=True)),
                (
                    "access",
                    models.CharField(
                        choices=[
                            ("project", "Project"),
                            ("private", "Private"),
                            ("public", "Public"),
                            ("link", "Link"),
                        ],
                        default="private",
                        max_length=20,
                    ),
                ),
                ("collections", models.ManyToManyField(blank=True, related_name="%(class)s", to="portal.collection")),
                (
                    "tags",
                    tagulous.models.fields.TagField(
                        _set_tag_meta=True,
                        blank=True,
                        help_text="Enter a comma-separated tag string",
                        to="apps.tagulous_tissuumapsinstance_tags",
                    ),
                ),
                ("volume", models.ManyToManyField(blank=True, to="apps.volumeinstance")),
            ],
            options={
                "verbose_name": "TissUUmaps Instance",
                "verbose_name_plural": "TissUUmaps Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance", models.Model),
        ),
        migrations.CreateModel(
            name="RStudioInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                (
                    "access",
                    models.CharField(
                        choices=[("project", "Project"), ("private", "Private")], default="private", max_length=20
                    ),
                ),
                ("volume", models.ManyToManyField(blank=True, to="apps.volumeinstance")),
            ],
            options={
                "verbose_name": "RStudio Instance",
                "verbose_name_plural": "RStudio Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance",),
        ),
        migrations.CreateModel(
            name="JupyterInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                (
                    "access",
                    models.CharField(
                        choices=[("project", "Project"), ("private", "Private")], default="private", max_length=20
                    ),
                ),
                ("volume", models.ManyToManyField(blank=True, to="apps.volumeinstance")),
            ],
            options={
                "verbose_name": "JupyterLab Instance",
                "verbose_name_plural": "JupyterLab Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance",),
        ),
        migrations.CreateModel(
            name="FilemanagerInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                (
                    "access",
                    models.CharField(
                        choices=[("project", "Project"), ("private", "Private")], default="project", max_length=20
                    ),
                ),
                ("persistent", models.BooleanField(default=False)),
                ("volume", models.ManyToManyField(blank=True, to="apps.volumeinstance")),
            ],
            options={
                "verbose_name": "Filemanager",
                "verbose_name_plural": "Filemanagers",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance",),
        ),
        migrations.CreateModel(
            name="CustomAppInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                ("note_on_linkonly_privacy", models.TextField(blank=True, default="", null=True)),
                ("source_code_url", models.URLField(blank=True, null=True)),
                ("description", models.TextField(blank=True, default="", null=True)),
                (
                    "access",
                    models.CharField(
                        choices=[
                            ("project", "Project"),
                            ("private", "Private"),
                            ("public", "Public"),
                            ("link", "Link"),
                        ],
                        default="private",
                        max_length=20,
                    ),
                ),
                ("port", models.IntegerField(default=8000)),
                ("image", models.CharField(max_length=255)),
                ("path", models.CharField(default="/", max_length=255)),
                ("user_id", models.IntegerField(default=1000)),
                ("collections", models.ManyToManyField(blank=True, related_name="%(class)s", to="portal.collection")),
                (
                    "tags",
                    tagulous.models.fields.TagField(
                        _set_tag_meta=True,
                        blank=True,
                        help_text="Enter a comma-separated tag string",
                        to="apps.tagulous_customappinstance_tags",
                    ),
                ),
                ("volume", models.ManyToManyField(blank=True, to="apps.volumeinstance")),
            ],
            options={
                "verbose_name": "Custom App Instance",
                "verbose_name_plural": "Custom App Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance", models.Model),
        ),
        migrations.CreateModel(
            name="VSCodeInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                (
                    "access",
                    models.CharField(
                        choices=[("project", "Project"), ("private", "Private")], default="private", max_length=20
                    ),
                ),
                ("volume", models.ManyToManyField(blank=True, to="apps.volumeinstance")),
            ],
            options={
                "verbose_name": "VS Code Instance",
                "verbose_name_plural": "VS Code Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance",),
        ),
    ]
