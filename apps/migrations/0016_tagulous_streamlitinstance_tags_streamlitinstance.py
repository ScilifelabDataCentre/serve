# Generated by Django 5.1.1 on 2024-10-15 10:18

import django.db.models.deletion
import tagulous.models.fields
import tagulous.models.models
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("apps", "0015_tagulous_abstractcustomappinstance_tags_and_more"),
        ("portal", "0002_eventsobject"),
    ]

    operations = [
        migrations.CreateModel(
            name="Tagulous_StreamlitInstance_tags",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, unique=True)),
                ("slug", models.SlugField()),
                (
                    "count",
                    models.IntegerField(default=0, help_text="Internal counter of how many times this tag is in use"),
                ),
                (
                    "protected",
                    models.BooleanField(default=False, help_text="Will not be deleted when the count reaches 0"),
                ),
            ],
            options={
                "ordering": ("name",),
                "abstract": False,
                "unique_together": {("slug",)},
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name="StreamlitInstance",
            fields=[
                (
                    "baseappinstance_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="apps.baseappinstance",
                    ),
                ),
                (
                    "logs_enabled",
                    models.BooleanField(
                        default=True, help_text="Indicates whether logs are activated and visible to the user"
                    ),
                ),
                ("note_on_linkonly_privacy", models.TextField(blank=True, default="", null=True)),
                ("source_code_url", models.URLField(blank=True, null=True)),
                ("description", models.TextField(blank=True, default="", null=True)),
                (
                    "access",
                    models.CharField(
                        choices=[
                            ("project", "Project"),
                            ("private", "Private"),
                            ("public", "Public"),
                            ("link", "Link"),
                        ],
                        default="project",
                        max_length=20,
                    ),
                ),
                ("port", models.IntegerField(default=8000)),
                ("image", models.CharField(max_length=255)),
                ("path", models.CharField(blank=True, default="/", max_length=255)),
                ("user_id", models.IntegerField(default=1000)),
                ("collections", models.ManyToManyField(blank=True, related_name="%(class)s", to="portal.collection")),
                (
                    "volume",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s",
                        to="apps.volumeinstance",
                    ),
                ),
                (
                    "tags",
                    tagulous.models.fields.TagField(
                        _set_tag_meta=True,
                        blank=True,
                        force_lowercase=True,
                        help_text="Add keywords to help categorize your app",
                        to="apps.tagulous_streamlitinstance_tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "Streamlit App Instance",
                "verbose_name_plural": "Streamlit App Instances",
                "permissions": [("can_access_app", "Can access app service")],
            },
            bases=("apps.baseappinstance", models.Model),
        ),
    ]
